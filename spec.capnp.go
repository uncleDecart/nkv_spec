// Code generated by capnpc-go. DO NOT EDIT.

package nkv_spec

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type BaseMessage capnp.Struct

// BaseMessage_TypeID is the unique identifier for the type BaseMessage.
const BaseMessage_TypeID = 0xdefacd874f15a465

func NewBaseMessage(s *capnp.Segment) (BaseMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BaseMessage(st), err
}

func NewRootBaseMessage(s *capnp.Segment) (BaseMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BaseMessage(st), err
}

func ReadRootBaseMessage(msg *capnp.Message) (BaseMessage, error) {
	root, err := msg.Root()
	return BaseMessage(root.Struct()), err
}

func (s BaseMessage) String() string {
	str, _ := text.Marshal(0xdefacd874f15a465, capnp.Struct(s))
	return str
}

func (s BaseMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BaseMessage) DecodeFromPtr(p capnp.Ptr) BaseMessage {
	return BaseMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BaseMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BaseMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BaseMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BaseMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BaseMessage) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BaseMessage) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BaseMessage) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BaseMessage) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BaseMessage) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BaseMessage) HasKey() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BaseMessage) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BaseMessage) SetKey(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BaseMessage) ClientUuid() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s BaseMessage) HasClientUuid() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s BaseMessage) ClientUuidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s BaseMessage) SetClientUuid(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// BaseMessage_List is a list of BaseMessage.
type BaseMessage_List = capnp.StructList[BaseMessage]

// NewBaseMessage creates a new list of BaseMessage.
func NewBaseMessage_List(s *capnp.Segment, sz int32) (BaseMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[BaseMessage](l), err
}

// BaseMessage_Future is a wrapper for a BaseMessage promised by a client call.
type BaseMessage_Future struct{ *capnp.Future }

func (f BaseMessage_Future) Struct() (BaseMessage, error) {
	p, err := f.Future.Ptr()
	return BaseMessage(p.Struct()), err
}

type PutMessage capnp.Struct

// PutMessage_TypeID is the unique identifier for the type PutMessage.
const PutMessage_TypeID = 0xfefd696300722295

func NewPutMessage(s *capnp.Segment) (PutMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutMessage(st), err
}

func NewRootPutMessage(s *capnp.Segment) (PutMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutMessage(st), err
}

func ReadRootPutMessage(msg *capnp.Message) (PutMessage, error) {
	root, err := msg.Root()
	return PutMessage(root.Struct()), err
}

func (s PutMessage) String() string {
	str, _ := text.Marshal(0xfefd696300722295, capnp.Struct(s))
	return str
}

func (s PutMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PutMessage) DecodeFromPtr(p capnp.Ptr) PutMessage {
	return PutMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PutMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PutMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PutMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PutMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PutMessage) Base() (BaseMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s PutMessage) HasBase() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PutMessage) SetBase(v BaseMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s PutMessage) NewBase() (BaseMessage, error) {
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PutMessage) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s PutMessage) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PutMessage) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// PutMessage_List is a list of PutMessage.
type PutMessage_List = capnp.StructList[PutMessage]

// NewPutMessage creates a new list of PutMessage.
func NewPutMessage_List(s *capnp.Segment, sz int32) (PutMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[PutMessage](l), err
}

// PutMessage_Future is a wrapper for a PutMessage promised by a client call.
type PutMessage_Future struct{ *capnp.Future }

func (f PutMessage_Future) Struct() (PutMessage, error) {
	p, err := f.Future.Ptr()
	return PutMessage(p.Struct()), err
}
func (p PutMessage_Future) Base() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}

type ServerRequest capnp.Struct

// ServerRequest_TypeID is the unique identifier for the type ServerRequest.
const ServerRequest_TypeID = 0xd58909d665880630

func NewServerRequest(s *capnp.Segment) (ServerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ServerRequest(st), err
}

func NewRootServerRequest(s *capnp.Segment) (ServerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ServerRequest(st), err
}

func ReadRootServerRequest(msg *capnp.Message) (ServerRequest, error) {
	root, err := msg.Root()
	return ServerRequest(root.Struct()), err
}

func (s ServerRequest) String() string {
	str, _ := text.Marshal(0xd58909d665880630, capnp.Struct(s))
	return str
}

func (s ServerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerRequest) DecodeFromPtr(p capnp.Ptr) ServerRequest {
	return ServerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerRequest) Put() (PutMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PutMessage(p.Struct()), err
}

func (s ServerRequest) HasPut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetPut(v PutMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPut sets the put field to a newly
// allocated PutMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewPut() (PutMessage, error) {
	ss, err := NewPutMessage(capnp.Struct(s).Segment())
	if err != nil {
		return PutMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Get() (BaseMessage, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasGet() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ServerRequest) SetGet(v BaseMessage) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewGet sets the get field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewGet() (BaseMessage, error) {
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Delete() (BaseMessage, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasDelete() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ServerRequest) SetDelete(v BaseMessage) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDelete sets the delete field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewDelete() (BaseMessage, error) {
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Subscribe() (BaseMessage, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasSubscribe() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ServerRequest) SetSubscribe(v BaseMessage) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSubscribe sets the subscribe field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewSubscribe() (BaseMessage, error) {
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Unsubscribe() (BaseMessage, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasUnsubscribe() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ServerRequest) SetUnsubscribe(v BaseMessage) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewUnsubscribe sets the unsubscribe field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewUnsubscribe() (BaseMessage, error) {
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerRequest_List is a list of ServerRequest.
type ServerRequest_List = capnp.StructList[ServerRequest]

// NewServerRequest creates a new list of ServerRequest.
func NewServerRequest_List(s *capnp.Segment, sz int32) (ServerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[ServerRequest](l), err
}

// ServerRequest_Future is a wrapper for a ServerRequest promised by a client call.
type ServerRequest_Future struct{ *capnp.Future }

func (f ServerRequest_Future) Struct() (ServerRequest, error) {
	p, err := f.Future.Ptr()
	return ServerRequest(p.Struct()), err
}
func (p ServerRequest_Future) Put() PutMessage_Future {
	return PutMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Get() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(1, nil)}
}
func (p ServerRequest_Future) Delete() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(2, nil)}
}
func (p ServerRequest_Future) Subscribe() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(3, nil)}
}
func (p ServerRequest_Future) Unsubscribe() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(4, nil)}
}

type BaseResp capnp.Struct

// BaseResp_TypeID is the unique identifier for the type BaseResp.
const BaseResp_TypeID = 0xe7bcfbaa769082c4

func NewBaseResp(s *capnp.Segment) (BaseResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BaseResp(st), err
}

func NewRootBaseResp(s *capnp.Segment) (BaseResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BaseResp(st), err
}

func ReadRootBaseResp(msg *capnp.Message) (BaseResp, error) {
	root, err := msg.Root()
	return BaseResp(root.Struct()), err
}

func (s BaseResp) String() string {
	str, _ := text.Marshal(0xe7bcfbaa769082c4, capnp.Struct(s))
	return str
}

func (s BaseResp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BaseResp) DecodeFromPtr(p capnp.Ptr) BaseResp {
	return BaseResp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BaseResp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BaseResp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BaseResp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BaseResp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BaseResp) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BaseResp) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BaseResp) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BaseResp) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BaseResp) Status() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s BaseResp) SetStatus(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s BaseResp) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BaseResp) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BaseResp) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BaseResp) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// BaseResp_List is a list of BaseResp.
type BaseResp_List = capnp.StructList[BaseResp]

// NewBaseResp creates a new list of BaseResp.
func NewBaseResp_List(s *capnp.Segment, sz int32) (BaseResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[BaseResp](l), err
}

// BaseResp_Future is a wrapper for a BaseResp promised by a client call.
type BaseResp_Future struct{ *capnp.Future }

func (f BaseResp_Future) Struct() (BaseResp, error) {
	p, err := f.Future.Ptr()
	return BaseResp(p.Struct()), err
}

type DataResp capnp.Struct

// DataResp_TypeID is the unique identifier for the type DataResp.
const DataResp_TypeID = 0xcd8ddd577462762d

func NewDataResp(s *capnp.Segment) (DataResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataResp(st), err
}

func NewRootDataResp(s *capnp.Segment) (DataResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataResp(st), err
}

func ReadRootDataResp(msg *capnp.Message) (DataResp, error) {
	root, err := msg.Root()
	return DataResp(root.Struct()), err
}

func (s DataResp) String() string {
	str, _ := text.Marshal(0xcd8ddd577462762d, capnp.Struct(s))
	return str
}

func (s DataResp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DataResp) DecodeFromPtr(p capnp.Ptr) DataResp {
	return DataResp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DataResp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DataResp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DataResp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DataResp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DataResp) Base() (BaseResp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseResp(p.Struct()), err
}

func (s DataResp) HasBase() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DataResp) SetBase(v BaseResp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseResp struct, preferring placement in s's segment.
func (s DataResp) NewBase() (BaseResp, error) {
	ss, err := NewBaseResp(capnp.Struct(s).Segment())
	if err != nil {
		return BaseResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s DataResp) Data() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s DataResp) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DataResp) SetData(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s DataResp) NewData(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// DataResp_List is a list of DataResp.
type DataResp_List = capnp.StructList[DataResp]

// NewDataResp creates a new list of DataResp.
func NewDataResp_List(s *capnp.Segment, sz int32) (DataResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[DataResp](l), err
}

// DataResp_Future is a wrapper for a DataResp promised by a client call.
type DataResp_Future struct{ *capnp.Future }

func (f DataResp_Future) Struct() (DataResp, error) {
	p, err := f.Future.Ptr()
	return DataResp(p.Struct()), err
}
func (p DataResp_Future) Base() BaseResp_Future {
	return BaseResp_Future{Future: p.Future.Field(0, nil)}
}

type ServerResponse capnp.Struct

// ServerResponse_TypeID is the unique identifier for the type ServerResponse.
const ServerResponse_TypeID = 0xfb2adf604579752f

func NewServerResponse(s *capnp.Segment) (ServerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ServerResponse(st), err
}

func NewRootServerResponse(s *capnp.Segment) (ServerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ServerResponse(st), err
}

func ReadRootServerResponse(msg *capnp.Message) (ServerResponse, error) {
	root, err := msg.Root()
	return ServerResponse(root.Struct()), err
}

func (s ServerResponse) String() string {
	str, _ := text.Marshal(0xfb2adf604579752f, capnp.Struct(s))
	return str
}

func (s ServerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerResponse) DecodeFromPtr(p capnp.Ptr) ServerResponse {
	return ServerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerResponse) Base() (BaseResp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseResp(p.Struct()), err
}

func (s ServerResponse) HasBase() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetBase(v BaseResp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseResp struct, preferring placement in s's segment.
func (s ServerResponse) NewBase() (BaseResp, error) {
	ss, err := NewBaseResp(capnp.Struct(s).Segment())
	if err != nil {
		return BaseResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Get() (DataResp, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasGet() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ServerResponse) SetGet(v DataResp) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewGet sets the get field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewGet() (DataResp, error) {
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Put() (DataResp, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasPut() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ServerResponse) SetPut(v DataResp) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewPut sets the put field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewPut() (DataResp, error) {
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Sub() (DataResp, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasSub() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ServerResponse) SetSub(v DataResp) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSub sets the sub field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewSub() (DataResp, error) {
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerResponse_List is a list of ServerResponse.
type ServerResponse_List = capnp.StructList[ServerResponse]

// NewServerResponse creates a new list of ServerResponse.
func NewServerResponse_List(s *capnp.Segment, sz int32) (ServerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[ServerResponse](l), err
}

// ServerResponse_Future is a wrapper for a ServerResponse promised by a client call.
type ServerResponse_Future struct{ *capnp.Future }

func (f ServerResponse_Future) Struct() (ServerResponse, error) {
	p, err := f.Future.Ptr()
	return ServerResponse(p.Struct()), err
}
func (p ServerResponse_Future) Base() BaseResp_Future {
	return BaseResp_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerResponse_Future) Get() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(1, nil)}
}
func (p ServerResponse_Future) Put() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(2, nil)}
}
func (p ServerResponse_Future) Sub() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(3, nil)}
}

const schema_ad055e760f5b08be = "x\xda\x8cT_K\x14_\x18~\x9f\xf3\xce:\xfe@" +
	"\x7f\xbb\xd3\xac7\xdeHR`\x82i\xd9M\xdeh\xa2" +
	"P\xa0\xb4\xc7\x8a\xa2\xbf\xce\xee\x1etq\xdd\xb6\x9d\x99" +
	"5!\xe9\x0fE\x0a\x09\x06u\xd7M\xd0M\x81\xf4\x05" +
	"\xc2\xabn\xbd\xac;\xeb*$\xbf@\xa0\xd4\xc4\xd9]" +
	"\xd7iw\x82n\x86\x97\xe7}\xe6\xbc\xcf\xfb\xccsf" +
	"`\x03#\xc6\x89\xf6\x05&!{b-A_9\xed" +
	"]\xdeZ\xdd$+\x89`\xa3\xf5Z\xbc|3\xb6N" +
	"1a\x12\xd9\xaf\xb1c\xafCWo\xb1@\x08\x06Z" +
	"\x96\xd5\xe7\xffV>5pc&\xd1`\x878\x04\xfb" +
	"\xa8~m\xf0\xb0\xe8\x02!Po:\xce?\xdd\xdc\xfd" +
	"\xd2\xc0fM9\xcd\x02\xf6\xb8.\xed3\xfc\x9e\x10|" +
	"|\xb4V~\xb7\xf7a\x9bd\x12M:\xb6x\xc7\xfe" +
	"^!\x7f\xab\x90\xfb\xfd\xc5\xf1\xe9\xaf\xbd{\x0d'\x1b" +
	"\xfa\xe4%\xa3\x13\xf6\xaa.\xed\x15c\x9b\xf0\xe3ew" +
	")\x93\xfb\xf9+b\xbd\x1b\xb1];\xa7\xc5\xdb*\xb6" +
	"@}Aa\xae|\xcb-\xaa\x8c\xe8\xd7\xcf\xe3\x19\xa7" +
	"X(\x0e\x8d9\x9e\x13\x9fRn1\x05\xc8V6\x88" +
	"\x0c\x10Y\xc7z\x89\xe4\x11\x86\x1c\x10\xb0\x80$4\xd8" +
	"\xa7\xc1\x1e\x86\x1c\x13\x88\xa7\x1dW!q\xb0\x18\x01\x09" +
	"B<\xebx\x0e\xfe'\xa4\x18h'\xa1\xcb\xfa`\x0e" +
	"\x0f\xbe\xa0JeU\x9aRw|\xe5\xc2\xd3\xd3\x93\xf5" +
	"\xe9K\xddD\xf2.C>\x0eM\x7f\xa8\xc1{\x0c\xb9" +
	",`\x09\x91\x84 \xb2\x9e\x0c\x11\xc9\x07\x0c\xf9L\xc0" +
	"bN\x82\x89\xac\x95)\"\xb9\xcc\x90/\x04,\xc3H" +
	"\xc2 \xb2\x9e\xa7\x89\xe4\x1aC\xbe\x120\x8b\xbe\x87\xc4" +
	"\xbeuU\xe5\xe6\x8c\xf2\x908\xf8\xaaUt8\xab\xf2" +
	"\xcaS\xcd\x8d\xc0\xf5\xd3n\xa6\x94K\x13\xa2\xba~\xa1" +
	"\xda'3\x97\x8e\xeaGZ2\xea\xb8jR\xb9\xae3" +
	"\xa3H\x1b\xd2V7d\xbc\x93H\x8e0\xe4D\xc8\x90" +
	"s\xda\x901\x86L\x85\x0c\x99\xbcJ$'\x18\xf2\x8a" +
	"\x00\xe7\xb2h#\x816\x829\xa7\x16\xf7\xeb \x93\xcf" +
	"\xa9\x82w\xc9\xa7\x10!:\x1dZQ=\x1d\xd1r\xea" +
	"j\x86\xc2jPS3J$\xcf2\xe4\xc5?\xd4\x0c" +
	"\xbb\x9e\xe3\xf9.L\x120\x09\xf7\xe7\xabK7i\x89" +
	"\x0c\x8c[\xbc]`WiE\x89\xba\"GG\xf3:" +
	"C\xce\x86\x0cR\xda\xa0i\x86\xcc\x87\x0c\xcai0\xcb" +
	"\x90\xc5Pb\xe658\xcb\x90\xde_\x93]\xcbG\xfd" +
	"\x7fRC+IjB]?\xdd\x8cF[\x9c\xf2\xbd" +
	"\xc9\xe1\xea\xfe\xffr\x05O\xd6\xae\xe0\xa9\x03\xa1\x0d\xd9" +
	"\xea*;y_U._;\xe1w\x00\x00\x00\xff\xff" +
	"\xcfK/\xa2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ad055e760f5b08be,
		Nodes: []uint64{
			0xcd8ddd577462762d,
			0xd58909d665880630,
			0xdefacd874f15a465,
			0xe7bcfbaa769082c4,
			0xfb2adf604579752f,
			0xfefd696300722295,
		},
		Compressed: true,
	})
}
