// Code generated by capnpc-go. DO NOT EDIT.

package nkv_spec

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type BaseMessage capnp.Struct

// BaseMessage_TypeID is the unique identifier for the type BaseMessage.
const BaseMessage_TypeID = 0xdefacd874f15a465

func NewBaseMessage(s *capnp.Segment) (BaseMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BaseMessage(st), err
}

func NewRootBaseMessage(s *capnp.Segment) (BaseMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BaseMessage(st), err
}

func ReadRootBaseMessage(msg *capnp.Message) (BaseMessage, error) {
	root, err := msg.Root()
	return BaseMessage(root.Struct()), err
}

func (s BaseMessage) String() string {
	str, _ := text.Marshal(0xdefacd874f15a465, capnp.Struct(s))
	return str
}

func (s BaseMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BaseMessage) DecodeFromPtr(p capnp.Ptr) BaseMessage {
	return BaseMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BaseMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BaseMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BaseMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BaseMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BaseMessage) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BaseMessage) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BaseMessage) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BaseMessage) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BaseMessage) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BaseMessage) HasKey() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BaseMessage) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BaseMessage) SetKey(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BaseMessage) ClientUuid() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s BaseMessage) HasClientUuid() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s BaseMessage) ClientUuidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s BaseMessage) SetClientUuid(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// BaseMessage_List is a list of BaseMessage.
type BaseMessage_List = capnp.StructList[BaseMessage]

// NewBaseMessage creates a new list of BaseMessage.
func NewBaseMessage_List(s *capnp.Segment, sz int32) (BaseMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[BaseMessage](l), err
}

// BaseMessage_Future is a wrapper for a BaseMessage promised by a client call.
type BaseMessage_Future struct{ *capnp.Future }

func (f BaseMessage_Future) Struct() (BaseMessage, error) {
	p, err := f.Future.Ptr()
	return BaseMessage(p.Struct()), err
}

type PutMessage capnp.Struct

// PutMessage_TypeID is the unique identifier for the type PutMessage.
const PutMessage_TypeID = 0xfefd696300722295

func NewPutMessage(s *capnp.Segment) (PutMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutMessage(st), err
}

func NewRootPutMessage(s *capnp.Segment) (PutMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutMessage(st), err
}

func ReadRootPutMessage(msg *capnp.Message) (PutMessage, error) {
	root, err := msg.Root()
	return PutMessage(root.Struct()), err
}

func (s PutMessage) String() string {
	str, _ := text.Marshal(0xfefd696300722295, capnp.Struct(s))
	return str
}

func (s PutMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PutMessage) DecodeFromPtr(p capnp.Ptr) PutMessage {
	return PutMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PutMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PutMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PutMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PutMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PutMessage) Base() (BaseMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s PutMessage) HasBase() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PutMessage) SetBase(v BaseMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s PutMessage) NewBase() (BaseMessage, error) {
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PutMessage) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s PutMessage) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PutMessage) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// PutMessage_List is a list of PutMessage.
type PutMessage_List = capnp.StructList[PutMessage]

// NewPutMessage creates a new list of PutMessage.
func NewPutMessage_List(s *capnp.Segment, sz int32) (PutMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[PutMessage](l), err
}

// PutMessage_Future is a wrapper for a PutMessage promised by a client call.
type PutMessage_Future struct{ *capnp.Future }

func (f PutMessage_Future) Struct() (PutMessage, error) {
	p, err := f.Future.Ptr()
	return PutMessage(p.Struct()), err
}
func (p PutMessage_Future) Base() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}

type ServerRequest capnp.Struct
type ServerRequest_Which uint16

const (
	ServerRequest_Which_put         ServerRequest_Which = 0
	ServerRequest_Which_get         ServerRequest_Which = 1
	ServerRequest_Which_delete      ServerRequest_Which = 2
	ServerRequest_Which_subscribe   ServerRequest_Which = 3
	ServerRequest_Which_unsubscribe ServerRequest_Which = 4
)

func (w ServerRequest_Which) String() string {
	const s = "putgetdeletesubscribeunsubscribe"
	switch w {
	case ServerRequest_Which_put:
		return s[0:3]
	case ServerRequest_Which_get:
		return s[3:6]
	case ServerRequest_Which_delete:
		return s[6:12]
	case ServerRequest_Which_subscribe:
		return s[12:21]
	case ServerRequest_Which_unsubscribe:
		return s[21:32]

	}
	return "ServerRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ServerRequest_TypeID is the unique identifier for the type ServerRequest.
const ServerRequest_TypeID = 0xd58909d665880630

func NewServerRequest(s *capnp.Segment) (ServerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerRequest(st), err
}

func NewRootServerRequest(s *capnp.Segment) (ServerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerRequest(st), err
}

func ReadRootServerRequest(msg *capnp.Message) (ServerRequest, error) {
	root, err := msg.Root()
	return ServerRequest(root.Struct()), err
}

func (s ServerRequest) String() string {
	str, _ := text.Marshal(0xd58909d665880630, capnp.Struct(s))
	return str
}

func (s ServerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerRequest) DecodeFromPtr(p capnp.Ptr) ServerRequest {
	return ServerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ServerRequest) Which() ServerRequest_Which {
	return ServerRequest_Which(capnp.Struct(s).Uint16(0))
}
func (s ServerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerRequest) Put() (PutMessage, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != put")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PutMessage(p.Struct()), err
}

func (s ServerRequest) HasPut() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetPut(v PutMessage) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPut sets the put field to a newly
// allocated PutMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewPut() (PutMessage, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPutMessage(capnp.Struct(s).Segment())
	if err != nil {
		return PutMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Get() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != get")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasGet() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetGet(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGet sets the get field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewGet() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Delete() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != delete")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasDelete() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetDelete(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDelete sets the delete field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewDelete() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Subscribe() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != subscribe")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasSubscribe() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetSubscribe(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSubscribe sets the subscribe field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewSubscribe() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Unsubscribe() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != unsubscribe")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasUnsubscribe() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetUnsubscribe(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUnsubscribe sets the unsubscribe field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewUnsubscribe() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerRequest_List is a list of ServerRequest.
type ServerRequest_List = capnp.StructList[ServerRequest]

// NewServerRequest creates a new list of ServerRequest.
func NewServerRequest_List(s *capnp.Segment, sz int32) (ServerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServerRequest](l), err
}

// ServerRequest_Future is a wrapper for a ServerRequest promised by a client call.
type ServerRequest_Future struct{ *capnp.Future }

func (f ServerRequest_Future) Struct() (ServerRequest, error) {
	p, err := f.Future.Ptr()
	return ServerRequest(p.Struct()), err
}
func (p ServerRequest_Future) Put() PutMessage_Future {
	return PutMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Get() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Delete() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Subscribe() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Unsubscribe() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}

type BaseResp capnp.Struct

// BaseResp_TypeID is the unique identifier for the type BaseResp.
const BaseResp_TypeID = 0xe7bcfbaa769082c4

func NewBaseResp(s *capnp.Segment) (BaseResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BaseResp(st), err
}

func NewRootBaseResp(s *capnp.Segment) (BaseResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BaseResp(st), err
}

func ReadRootBaseResp(msg *capnp.Message) (BaseResp, error) {
	root, err := msg.Root()
	return BaseResp(root.Struct()), err
}

func (s BaseResp) String() string {
	str, _ := text.Marshal(0xe7bcfbaa769082c4, capnp.Struct(s))
	return str
}

func (s BaseResp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BaseResp) DecodeFromPtr(p capnp.Ptr) BaseResp {
	return BaseResp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BaseResp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BaseResp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BaseResp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BaseResp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BaseResp) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BaseResp) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BaseResp) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BaseResp) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BaseResp) Status() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s BaseResp) SetStatus(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s BaseResp) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BaseResp) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BaseResp) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BaseResp) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// BaseResp_List is a list of BaseResp.
type BaseResp_List = capnp.StructList[BaseResp]

// NewBaseResp creates a new list of BaseResp.
func NewBaseResp_List(s *capnp.Segment, sz int32) (BaseResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[BaseResp](l), err
}

// BaseResp_Future is a wrapper for a BaseResp promised by a client call.
type BaseResp_Future struct{ *capnp.Future }

func (f BaseResp_Future) Struct() (BaseResp, error) {
	p, err := f.Future.Ptr()
	return BaseResp(p.Struct()), err
}

type DataResp capnp.Struct

// DataResp_TypeID is the unique identifier for the type DataResp.
const DataResp_TypeID = 0xcd8ddd577462762d

func NewDataResp(s *capnp.Segment) (DataResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataResp(st), err
}

func NewRootDataResp(s *capnp.Segment) (DataResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataResp(st), err
}

func ReadRootDataResp(msg *capnp.Message) (DataResp, error) {
	root, err := msg.Root()
	return DataResp(root.Struct()), err
}

func (s DataResp) String() string {
	str, _ := text.Marshal(0xcd8ddd577462762d, capnp.Struct(s))
	return str
}

func (s DataResp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DataResp) DecodeFromPtr(p capnp.Ptr) DataResp {
	return DataResp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DataResp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DataResp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DataResp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DataResp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DataResp) Base() (BaseResp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseResp(p.Struct()), err
}

func (s DataResp) HasBase() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DataResp) SetBase(v BaseResp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseResp struct, preferring placement in s's segment.
func (s DataResp) NewBase() (BaseResp, error) {
	ss, err := NewBaseResp(capnp.Struct(s).Segment())
	if err != nil {
		return BaseResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s DataResp) Data() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s DataResp) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DataResp) SetData(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s DataResp) NewData(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// DataResp_List is a list of DataResp.
type DataResp_List = capnp.StructList[DataResp]

// NewDataResp creates a new list of DataResp.
func NewDataResp_List(s *capnp.Segment, sz int32) (DataResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[DataResp](l), err
}

// DataResp_Future is a wrapper for a DataResp promised by a client call.
type DataResp_Future struct{ *capnp.Future }

func (f DataResp_Future) Struct() (DataResp, error) {
	p, err := f.Future.Ptr()
	return DataResp(p.Struct()), err
}
func (p DataResp_Future) Base() BaseResp_Future {
	return BaseResp_Future{Future: p.Future.Field(0, nil)}
}

type ServerResponse capnp.Struct
type ServerResponse_Which uint16

const (
	ServerResponse_Which_base ServerResponse_Which = 0
	ServerResponse_Which_get  ServerResponse_Which = 1
	ServerResponse_Which_put  ServerResponse_Which = 2
	ServerResponse_Which_sub  ServerResponse_Which = 3
)

func (w ServerResponse_Which) String() string {
	const s = "basegetputsub"
	switch w {
	case ServerResponse_Which_base:
		return s[0:4]
	case ServerResponse_Which_get:
		return s[4:7]
	case ServerResponse_Which_put:
		return s[7:10]
	case ServerResponse_Which_sub:
		return s[10:13]

	}
	return "ServerResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ServerResponse_TypeID is the unique identifier for the type ServerResponse.
const ServerResponse_TypeID = 0xfb2adf604579752f

func NewServerResponse(s *capnp.Segment) (ServerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerResponse(st), err
}

func NewRootServerResponse(s *capnp.Segment) (ServerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerResponse(st), err
}

func ReadRootServerResponse(msg *capnp.Message) (ServerResponse, error) {
	root, err := msg.Root()
	return ServerResponse(root.Struct()), err
}

func (s ServerResponse) String() string {
	str, _ := text.Marshal(0xfb2adf604579752f, capnp.Struct(s))
	return str
}

func (s ServerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerResponse) DecodeFromPtr(p capnp.Ptr) ServerResponse {
	return ServerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ServerResponse) Which() ServerResponse_Which {
	return ServerResponse_Which(capnp.Struct(s).Uint16(0))
}
func (s ServerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerResponse) Base() (BaseResp, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != base")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseResp(p.Struct()), err
}

func (s ServerResponse) HasBase() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetBase(v BaseResp) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseResp struct, preferring placement in s's segment.
func (s ServerResponse) NewBase() (BaseResp, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewBaseResp(capnp.Struct(s).Segment())
	if err != nil {
		return BaseResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Get() (DataResp, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != get")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasGet() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetGet(v DataResp) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGet sets the get field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewGet() (DataResp, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Put() (DataResp, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != put")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasPut() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetPut(v DataResp) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPut sets the put field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewPut() (DataResp, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Sub() (DataResp, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != sub")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasSub() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetSub(v DataResp) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSub sets the sub field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewSub() (DataResp, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerResponse_List is a list of ServerResponse.
type ServerResponse_List = capnp.StructList[ServerResponse]

// NewServerResponse creates a new list of ServerResponse.
func NewServerResponse_List(s *capnp.Segment, sz int32) (ServerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServerResponse](l), err
}

// ServerResponse_Future is a wrapper for a ServerResponse promised by a client call.
type ServerResponse_Future struct{ *capnp.Future }

func (f ServerResponse_Future) Struct() (ServerResponse, error) {
	p, err := f.Future.Ptr()
	return ServerResponse(p.Struct()), err
}
func (p ServerResponse_Future) Base() BaseResp_Future {
	return BaseResp_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerResponse_Future) Get() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerResponse_Future) Put() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerResponse_Future) Sub() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(0, nil)}
}

type Notification capnp.Struct
type Notification_update Notification
type Notification_close Notification
type Notification_Which uint16

const (
	Notification_Which_hello    Notification_Which = 0
	Notification_Which_update   Notification_Which = 1
	Notification_Which_close    Notification_Which = 2
	Notification_Which_notfound Notification_Which = 3
)

func (w Notification_Which) String() string {
	const s = "helloupdateclosenotfound"
	switch w {
	case Notification_Which_hello:
		return s[0:5]
	case Notification_Which_update:
		return s[5:11]
	case Notification_Which_close:
		return s[11:16]
	case Notification_Which_notfound:
		return s[16:24]

	}
	return "Notification_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Notification_TypeID is the unique identifier for the type Notification.
const Notification_TypeID = 0x81ce6034fef90d8b

func NewNotification(s *capnp.Segment) (Notification, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Notification(st), err
}

func NewRootNotification(s *capnp.Segment) (Notification, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Notification(st), err
}

func ReadRootNotification(msg *capnp.Message) (Notification, error) {
	root, err := msg.Root()
	return Notification(root.Struct()), err
}

func (s Notification) String() string {
	str, _ := text.Marshal(0x81ce6034fef90d8b, capnp.Struct(s))
	return str
}

func (s Notification) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Notification) DecodeFromPtr(p capnp.Ptr) Notification {
	return Notification(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Notification) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Notification) Which() Notification_Which {
	return Notification_Which(capnp.Struct(s).Uint16(0))
}
func (s Notification) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Notification) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Notification) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Notification) SetHello() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Notification) Update() Notification_update { return Notification_update(s) }

func (s Notification) SetUpdate() {
	capnp.Struct(s).SetUint16(0, 1)
}

func (s Notification_update) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Notification_update) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Notification_update) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Notification_update) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Notification_update) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Notification_update) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Notification_update) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Notification_update) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Notification_update) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Notification_update) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Notification) Close() Notification_close { return Notification_close(s) }

func (s Notification) SetClose() {
	capnp.Struct(s).SetUint16(0, 2)
}

func (s Notification_close) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Notification_close) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Notification_close) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Notification_close) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Notification_close) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Notification_close) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Notification_close) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Notification) SetNotfound() {
	capnp.Struct(s).SetUint16(0, 3)

}

// Notification_List is a list of Notification.
type Notification_List = capnp.StructList[Notification]

// NewNotification creates a new list of Notification.
func NewNotification_List(s *capnp.Segment, sz int32) (Notification_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Notification](l), err
}

// Notification_Future is a wrapper for a Notification promised by a client call.
type Notification_Future struct{ *capnp.Future }

func (f Notification_Future) Struct() (Notification, error) {
	p, err := f.Future.Ptr()
	return Notification(p.Struct()), err
}
func (p Notification_Future) Update() Notification_update_Future {
	return Notification_update_Future{p.Future}
}

// Notification_update_Future is a wrapper for a Notification_update promised by a client call.
type Notification_update_Future struct{ *capnp.Future }

func (f Notification_update_Future) Struct() (Notification_update, error) {
	p, err := f.Future.Ptr()
	return Notification_update(p.Struct()), err
}
func (p Notification_Future) Close() Notification_close_Future {
	return Notification_close_Future{p.Future}
}

// Notification_close_Future is a wrapper for a Notification_close promised by a client call.
type Notification_close_Future struct{ *capnp.Future }

func (f Notification_close_Future) Struct() (Notification_close, error) {
	p, err := f.Future.Ptr()
	return Notification_close(p.Struct()), err
}

const schema_ad055e760f5b08be = "x\xda\x84\x94_h\x1cU\x14\xc6\xcfw\xef\xecN\xb4" +
	"\x99f\x87\xd9\x82\xfa\xb2X,\xb8\x91\xad\xb1\xc6\x97}" +
	"\xd9P\x12P\xe9jNlQT$\xb3\xbb\xb7\xc9\xe0" +
	"vw\xcc\xccl-\xb4\xd4\x88\xc5\x14\x15*\xe8\x9bO" +
	"\xc5\x17\x85*\xf8(\xea\x83(X!>\x88\xfaV\xc5" +
	"\x07\x09\xf8(\x88\xb41\x19\xb9;\x9b\xcd\xec\x9f\xe0\xdb" +
	"\xe5\xdcs\xcf\xf9\xdd\xf3}\xf7\xce\xcc\x8b9\xe3\x11\xeb" +
	"\xb2A\x82g3\xd9\xf8-\xeb\xf6\xee\xec\xf2\x0f\xeb\xc4" +
	"\x87\x80\xf8\xab\x89\x17\xa6:/en\xd0\x820\x0d\"" +
	"\xe7\x98\xf8\xda)\x09\x93\xc8)\x8a-B\\[\xf1N" +
	"\xfft\xf1\xee\x8f\x88\xef\x01\xf6\xcf\x1e\x11&\x88\x9c\x9b" +
	"\xe2\x0e\xc1\xd9\x14\xe7\x09\xf1\xc4\x8d\xe2C\xdf\xe5\xfe\xfc" +
	"d|fQ\xfeEpJ\xb2B\x88K\x9dZ\xf8\xec" +
	"\xadw6\xc9>\x94\x02\xc8t\xbbV\xe5u\xe7\x8c\xd4" +
	"+\x96\xba\xeaLvC\xfdr\xd7\xd5\x9f\x87iaf" +
	"\x88\x9c/\xe5\xf7\xceM\x9d\xfd\xe8\xb7\xb2\x00B\xac>" +
	"<\xf2\xf4\x9b\x9bw~\x1d*\xdd-x\xcb\xf8\xdc\xf9" +
	"\xc3\xd0\xab\xdf\x8dO\x09\xf17\xaf_\xeb|\xbc\xfd\xc5" +
	"\xd6P\xe9\x84\xe3R\xe6\xbas%\xa3W\xeb\x19\x9d\xfc" +
	"ptaa\xf9\xb7\xe9\xedQ\x0e=\xb5{\xb3?:" +
	"\xc7\xb2:\xfb\xfe\xec\x16\xe1\x9f\xf7\x8f\xae\xd5\xbd\x9d\xdd" +
	"1\xf7\xfb;\xfb\x99\xb3\xd3\xcd\xbc\x9d=O\xa58\xf0" +
	"U\xfdx\xdd\xf5E\xcb/?\xd5\x0e\xbd\xb3^\xdd\x0d" +
	"\xbdv\x8b\x16\x01\xceIc2\x8e\x0d\x10\xd9\xee\x09\"" +
	"~Q\x82W\x05,\xec\xc6HIc\xab2\x09K\xec" +
	"\xe8`_\x05\xbbz\x82\x84%\xff\x8d\xf30\x88\xec\xc7" +
	"\x9e$\xe2Y\x09\x9e\x13(\xac\xaaf\xb3M\xd9J\xe4" +
	"7\xdcP\x15\xea\xcdv\xa0\xe2V;<\xdb\x8eZ\x0d" +
	"\"\xf3@\xaa\xe3\xbd#<!\x0d\xa2<4Y\xf1(" +
	"\x11? \xc13\x026\x90\x87 \xb2K\x1a\xf7A\x09" +
	"\x9e\x150_V\x170I\x02\x93\x84B\xc7mF\x0a" +
	"\x16\x09X\x84\x83\xfb$Ll$m$\x91m\xe96" +
	"\x13\x12\x9c\x1f\xac\xd8\xaf\x81\x96_\x9ewCw\xc9T" +
	"\x81\xaf\xa7\xd7e\xec\x0e\xaf8=\x84\xa8\x83\xa5\xe9\x1e" +
	"\xe2\xbc\xc0T\xcd\x0d\x14r\xfb\x96  G\x98j\xb8" +
	"\xa1\x8b\xc3\x84E\x89.\xf3\xe1!\xe6g\xd4ZG\xad" +
	"-\xa9W\"\x15\x84\xd4\xd5,\xbf\xaf\xd9%\x8d\xfc\xaa" +
	"\x04\xbf\x91h\x96\xf4]\xd7\xd1\x8b\x12\xbc!\xa0EK" +
	"\x06v\xa5L\xc4\xafI\xf0\xdb\x02\x89j\xfa\xd2W\x97" +
	"\x88xC\x82\xdf\x13\xb0\x8c\xed\x9e\x96\xef\xd6\x88\xf8\x9a" +
	"\x04\x7f `\xfaQ\x88\xdc\x9e\xe1\x12lsE\x85\xc8" +
	"\xed\xbf\x85$Zi\xa8\xa6\x0a\xd5\xe8F\x1cD\xb5\xa0" +
	"\xbe\xe6\xd5\x08\xe3v\xa3V\xb2O\xa6W\x1b{:5" +
	"\xff\x93n\xa0\xaa\x15\x15\x04\xee\x8a\xd2\xc3\x98\xecK\xb0" +
	"p\x1f\x11\xcfI\xf0\xa9\x94\x04O\xe8Q\xccK\xf0\xa2" +
	"\x80-D2\x89\xea\xf3D|J\x82\x9f\x13\x90^c" +
	"O\xe7\x01\xcd\xebMO\xb5\xc23\x11\xa5\x12F@\xfa" +
	"F\x18O\xd1\x87(\xa7!z\xfe\xad\x9e$\xe2\xc7%" +
	"\xf8\xf4\x00D%\x08\xdd0\x0a`\x92\x80I\xb8|." +
	"\xb9\xea\x08B\xda\x1b\x81\xdfn\x05P\xc3\xefyz\xf0" +
	"=',J\x0fdY\x82\x9biox:\xda\x90`" +
	"?\xed\x8ds:\xba*\xc1\xe1\x81\xfe\xed\x19\xa1\xff\xdf" +
	"\xf6\xa2]\xcb\x8cD\x83\xa86\x1a\x1d\x18\xeab\x14V" +
	"U\xa1/\xee\xff\xbd\xaf\xd4\x17\xb0\xc77\xe4\x9d\xc1\xdf" +
	"\xe0\xbf\x00\x00\x00\xff\xff}\\\xa6H"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ad055e760f5b08be,
		Nodes: []uint64{
			0x81ce6034fef90d8b,
			0xa90a7cd454696762,
			0xaeea10c82b29ad08,
			0xcd8ddd577462762d,
			0xd58909d665880630,
			0xdefacd874f15a465,
			0xe7bcfbaa769082c4,
			0xfb2adf604579752f,
			0xfefd696300722295,
		},
		Compressed: true,
	})
}
