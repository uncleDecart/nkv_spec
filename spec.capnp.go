// Code generated by capnpc-go. DO NOT EDIT.

package nkv_spec

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type BaseMessage capnp.Struct

// BaseMessage_TypeID is the unique identifier for the type BaseMessage.
const BaseMessage_TypeID = 0xdefacd874f15a465

func NewBaseMessage(s *capnp.Segment) (BaseMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BaseMessage(st), err
}

func NewRootBaseMessage(s *capnp.Segment) (BaseMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BaseMessage(st), err
}

func ReadRootBaseMessage(msg *capnp.Message) (BaseMessage, error) {
	root, err := msg.Root()
	return BaseMessage(root.Struct()), err
}

func (s BaseMessage) String() string {
	str, _ := text.Marshal(0xdefacd874f15a465, capnp.Struct(s))
	return str
}

func (s BaseMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BaseMessage) DecodeFromPtr(p capnp.Ptr) BaseMessage {
	return BaseMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BaseMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BaseMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BaseMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BaseMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BaseMessage) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BaseMessage) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BaseMessage) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BaseMessage) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BaseMessage) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BaseMessage) HasKey() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BaseMessage) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BaseMessage) SetKey(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BaseMessage) ClientUuid() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s BaseMessage) HasClientUuid() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s BaseMessage) ClientUuidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s BaseMessage) SetClientUuid(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// BaseMessage_List is a list of BaseMessage.
type BaseMessage_List = capnp.StructList[BaseMessage]

// NewBaseMessage creates a new list of BaseMessage.
func NewBaseMessage_List(s *capnp.Segment, sz int32) (BaseMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[BaseMessage](l), err
}

// BaseMessage_Future is a wrapper for a BaseMessage promised by a client call.
type BaseMessage_Future struct{ *capnp.Future }

func (f BaseMessage_Future) Struct() (BaseMessage, error) {
	p, err := f.Future.Ptr()
	return BaseMessage(p.Struct()), err
}

type PutMessage capnp.Struct

// PutMessage_TypeID is the unique identifier for the type PutMessage.
const PutMessage_TypeID = 0xfefd696300722295

func NewPutMessage(s *capnp.Segment) (PutMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutMessage(st), err
}

func NewRootPutMessage(s *capnp.Segment) (PutMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutMessage(st), err
}

func ReadRootPutMessage(msg *capnp.Message) (PutMessage, error) {
	root, err := msg.Root()
	return PutMessage(root.Struct()), err
}

func (s PutMessage) String() string {
	str, _ := text.Marshal(0xfefd696300722295, capnp.Struct(s))
	return str
}

func (s PutMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PutMessage) DecodeFromPtr(p capnp.Ptr) PutMessage {
	return PutMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PutMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PutMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PutMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PutMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PutMessage) Base() (BaseMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s PutMessage) HasBase() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PutMessage) SetBase(v BaseMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s PutMessage) NewBase() (BaseMessage, error) {
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PutMessage) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s PutMessage) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PutMessage) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// PutMessage_List is a list of PutMessage.
type PutMessage_List = capnp.StructList[PutMessage]

// NewPutMessage creates a new list of PutMessage.
func NewPutMessage_List(s *capnp.Segment, sz int32) (PutMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[PutMessage](l), err
}

// PutMessage_Future is a wrapper for a PutMessage promised by a client call.
type PutMessage_Future struct{ *capnp.Future }

func (f PutMessage_Future) Struct() (PutMessage, error) {
	p, err := f.Future.Ptr()
	return PutMessage(p.Struct()), err
}
func (p PutMessage_Future) Base() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}

type ServerRequest capnp.Struct
type ServerRequest_Which uint16

const (
	ServerRequest_Which_put         ServerRequest_Which = 0
	ServerRequest_Which_get         ServerRequest_Which = 1
	ServerRequest_Which_delete      ServerRequest_Which = 2
	ServerRequest_Which_subscribe   ServerRequest_Which = 3
	ServerRequest_Which_unsubscribe ServerRequest_Which = 4
)

func (w ServerRequest_Which) String() string {
	const s = "putgetdeletesubscribeunsubscribe"
	switch w {
	case ServerRequest_Which_put:
		return s[0:3]
	case ServerRequest_Which_get:
		return s[3:6]
	case ServerRequest_Which_delete:
		return s[6:12]
	case ServerRequest_Which_subscribe:
		return s[12:21]
	case ServerRequest_Which_unsubscribe:
		return s[21:32]

	}
	return "ServerRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ServerRequest_TypeID is the unique identifier for the type ServerRequest.
const ServerRequest_TypeID = 0xd58909d665880630

func NewServerRequest(s *capnp.Segment) (ServerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerRequest(st), err
}

func NewRootServerRequest(s *capnp.Segment) (ServerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerRequest(st), err
}

func ReadRootServerRequest(msg *capnp.Message) (ServerRequest, error) {
	root, err := msg.Root()
	return ServerRequest(root.Struct()), err
}

func (s ServerRequest) String() string {
	str, _ := text.Marshal(0xd58909d665880630, capnp.Struct(s))
	return str
}

func (s ServerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerRequest) DecodeFromPtr(p capnp.Ptr) ServerRequest {
	return ServerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ServerRequest) Which() ServerRequest_Which {
	return ServerRequest_Which(capnp.Struct(s).Uint16(0))
}
func (s ServerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerRequest) Put() (PutMessage, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != put")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PutMessage(p.Struct()), err
}

func (s ServerRequest) HasPut() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetPut(v PutMessage) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPut sets the put field to a newly
// allocated PutMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewPut() (PutMessage, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPutMessage(capnp.Struct(s).Segment())
	if err != nil {
		return PutMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Get() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != get")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasGet() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetGet(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGet sets the get field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewGet() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Delete() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != delete")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasDelete() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetDelete(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDelete sets the delete field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewDelete() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Subscribe() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != subscribe")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasSubscribe() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetSubscribe(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSubscribe sets the subscribe field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewSubscribe() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerRequest) Unsubscribe() (BaseMessage, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != unsubscribe")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseMessage(p.Struct()), err
}

func (s ServerRequest) HasUnsubscribe() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerRequest) SetUnsubscribe(v BaseMessage) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUnsubscribe sets the unsubscribe field to a newly
// allocated BaseMessage struct, preferring placement in s's segment.
func (s ServerRequest) NewUnsubscribe() (BaseMessage, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewBaseMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BaseMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerRequest_List is a list of ServerRequest.
type ServerRequest_List = capnp.StructList[ServerRequest]

// NewServerRequest creates a new list of ServerRequest.
func NewServerRequest_List(s *capnp.Segment, sz int32) (ServerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServerRequest](l), err
}

// ServerRequest_Future is a wrapper for a ServerRequest promised by a client call.
type ServerRequest_Future struct{ *capnp.Future }

func (f ServerRequest_Future) Struct() (ServerRequest, error) {
	p, err := f.Future.Ptr()
	return ServerRequest(p.Struct()), err
}
func (p ServerRequest_Future) Put() PutMessage_Future {
	return PutMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Get() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Delete() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Subscribe() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerRequest_Future) Unsubscribe() BaseMessage_Future {
	return BaseMessage_Future{Future: p.Future.Field(0, nil)}
}

type BaseResp capnp.Struct

// BaseResp_TypeID is the unique identifier for the type BaseResp.
const BaseResp_TypeID = 0xe7bcfbaa769082c4

func NewBaseResp(s *capnp.Segment) (BaseResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BaseResp(st), err
}

func NewRootBaseResp(s *capnp.Segment) (BaseResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BaseResp(st), err
}

func ReadRootBaseResp(msg *capnp.Message) (BaseResp, error) {
	root, err := msg.Root()
	return BaseResp(root.Struct()), err
}

func (s BaseResp) String() string {
	str, _ := text.Marshal(0xe7bcfbaa769082c4, capnp.Struct(s))
	return str
}

func (s BaseResp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BaseResp) DecodeFromPtr(p capnp.Ptr) BaseResp {
	return BaseResp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BaseResp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BaseResp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BaseResp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BaseResp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BaseResp) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BaseResp) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BaseResp) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BaseResp) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BaseResp) Status() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s BaseResp) SetStatus(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s BaseResp) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BaseResp) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BaseResp) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BaseResp) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// BaseResp_List is a list of BaseResp.
type BaseResp_List = capnp.StructList[BaseResp]

// NewBaseResp creates a new list of BaseResp.
func NewBaseResp_List(s *capnp.Segment, sz int32) (BaseResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[BaseResp](l), err
}

// BaseResp_Future is a wrapper for a BaseResp promised by a client call.
type BaseResp_Future struct{ *capnp.Future }

func (f BaseResp_Future) Struct() (BaseResp, error) {
	p, err := f.Future.Ptr()
	return BaseResp(p.Struct()), err
}

type DataResp capnp.Struct

// DataResp_TypeID is the unique identifier for the type DataResp.
const DataResp_TypeID = 0xcd8ddd577462762d

func NewDataResp(s *capnp.Segment) (DataResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataResp(st), err
}

func NewRootDataResp(s *capnp.Segment) (DataResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataResp(st), err
}

func ReadRootDataResp(msg *capnp.Message) (DataResp, error) {
	root, err := msg.Root()
	return DataResp(root.Struct()), err
}

func (s DataResp) String() string {
	str, _ := text.Marshal(0xcd8ddd577462762d, capnp.Struct(s))
	return str
}

func (s DataResp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DataResp) DecodeFromPtr(p capnp.Ptr) DataResp {
	return DataResp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DataResp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DataResp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DataResp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DataResp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DataResp) Base() (BaseResp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BaseResp(p.Struct()), err
}

func (s DataResp) HasBase() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DataResp) SetBase(v BaseResp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseResp struct, preferring placement in s's segment.
func (s DataResp) NewBase() (BaseResp, error) {
	ss, err := NewBaseResp(capnp.Struct(s).Segment())
	if err != nil {
		return BaseResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s DataResp) Data() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s DataResp) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DataResp) SetData(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s DataResp) NewData(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// DataResp_List is a list of DataResp.
type DataResp_List = capnp.StructList[DataResp]

// NewDataResp creates a new list of DataResp.
func NewDataResp_List(s *capnp.Segment, sz int32) (DataResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[DataResp](l), err
}

// DataResp_Future is a wrapper for a DataResp promised by a client call.
type DataResp_Future struct{ *capnp.Future }

func (f DataResp_Future) Struct() (DataResp, error) {
	p, err := f.Future.Ptr()
	return DataResp(p.Struct()), err
}
func (p DataResp_Future) Base() BaseResp_Future {
	return BaseResp_Future{Future: p.Future.Field(0, nil)}
}

type ServerResponse capnp.Struct
type ServerResponse_Which uint16

const (
	ServerResponse_Which_base ServerResponse_Which = 0
	ServerResponse_Which_get  ServerResponse_Which = 1
	ServerResponse_Which_put  ServerResponse_Which = 2
	ServerResponse_Which_sub  ServerResponse_Which = 3
)

func (w ServerResponse_Which) String() string {
	const s = "basegetputsub"
	switch w {
	case ServerResponse_Which_base:
		return s[0:4]
	case ServerResponse_Which_get:
		return s[4:7]
	case ServerResponse_Which_put:
		return s[7:10]
	case ServerResponse_Which_sub:
		return s[10:13]

	}
	return "ServerResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ServerResponse_TypeID is the unique identifier for the type ServerResponse.
const ServerResponse_TypeID = 0xfb2adf604579752f

func NewServerResponse(s *capnp.Segment) (ServerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerResponse(st), err
}

func NewRootServerResponse(s *capnp.Segment) (ServerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerResponse(st), err
}

func ReadRootServerResponse(msg *capnp.Message) (ServerResponse, error) {
	root, err := msg.Root()
	return ServerResponse(root.Struct()), err
}

func (s ServerResponse) String() string {
	str, _ := text.Marshal(0xfb2adf604579752f, capnp.Struct(s))
	return str
}

func (s ServerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerResponse) DecodeFromPtr(p capnp.Ptr) ServerResponse {
	return ServerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ServerResponse) Which() ServerResponse_Which {
	return ServerResponse_Which(capnp.Struct(s).Uint16(0))
}
func (s ServerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerResponse) Base() (BaseResp, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != base")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BaseResp(p.Struct()), err
}

func (s ServerResponse) HasBase() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetBase(v BaseResp) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBase sets the base field to a newly
// allocated BaseResp struct, preferring placement in s's segment.
func (s ServerResponse) NewBase() (BaseResp, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewBaseResp(capnp.Struct(s).Segment())
	if err != nil {
		return BaseResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Get() (DataResp, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != get")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasGet() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetGet(v DataResp) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGet sets the get field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewGet() (DataResp, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Put() (DataResp, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != put")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasPut() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetPut(v DataResp) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPut sets the put field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewPut() (DataResp, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerResponse) Sub() (DataResp, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != sub")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DataResp(p.Struct()), err
}

func (s ServerResponse) HasSub() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerResponse) SetSub(v DataResp) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSub sets the sub field to a newly
// allocated DataResp struct, preferring placement in s's segment.
func (s ServerResponse) NewSub() (DataResp, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewDataResp(capnp.Struct(s).Segment())
	if err != nil {
		return DataResp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerResponse_List is a list of ServerResponse.
type ServerResponse_List = capnp.StructList[ServerResponse]

// NewServerResponse creates a new list of ServerResponse.
func NewServerResponse_List(s *capnp.Segment, sz int32) (ServerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServerResponse](l), err
}

// ServerResponse_Future is a wrapper for a ServerResponse promised by a client call.
type ServerResponse_Future struct{ *capnp.Future }

func (f ServerResponse_Future) Struct() (ServerResponse, error) {
	p, err := f.Future.Ptr()
	return ServerResponse(p.Struct()), err
}
func (p ServerResponse_Future) Base() BaseResp_Future {
	return BaseResp_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerResponse_Future) Get() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerResponse_Future) Put() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(0, nil)}
}
func (p ServerResponse_Future) Sub() DataResp_Future {
	return DataResp_Future{Future: p.Future.Field(0, nil)}
}

const schema_ad055e760f5b08be = "x\xda\x8cT\xcfO\x13]\x14\xbd\xe7\xbd)\xc3\x97\xb4" +
	"_\xdbo\xca\x86\x0d\xf9\x88&H\x82\xa0\xb8\x91\x0dH" +
	"h\xa2\x09\xc4>\xd4h\xfc\xc9\xb4}\x81\x86Rkg" +
	"\xa6H\"\xf1G4B\"\x09&\xbasc\xe2F\x13" +
	"\xe2?`X\xb9e\xa9;te\x88\xfc\x03& <" +
	"\xf3:\xa5\x1d\xe9\x98\xb8in\xce=}\xf7\xbc\xf3\xce" +
	"\x9d\x81u\x8c\x18'b\xf3\x9c\x98\xe8\x89\xb4\xa9\xbej" +
	"\xd6\xbd\xbc\xb9\xb2A\xc9\x14\xd4z\xfb\xb5x\xf5fd" +
	"\x8d\"\xcc$\xb2^c\xdbZ\x83\xae\xdeb\x9e\xa0\x06" +
	"\xda\x96\xe4\xe7\x7f\x96?\x91H!@N\xc3\x8c\x10\x0d" +
	"v\xb0\xff`\x1d\xd5\x7f\x1c\xfc\x9fu\x81\xa0\xe4\x9b\x8e" +
	"\xf3O7v\xbe\x1c:\x9bk\xcai\xce`\xa5ui" +
	"\x9d\xe1\xef\x09\xea\xe3\xa3\xd5\xea\xbb\xdd\x0f[\x87\x0e\xf7" +
	"\x95l\xf2m\xeb{\x8d\xfc\xadF\xee\xf7\x16\xd2S_" +
	"{w[\x95\x18D\x83\x8bF'\xac\x15C\xd3\x97\x8d" +
	"-\xc2\x8f\x97\xdd\x95\\ao?\xe4\x8a7\";V" +
	"!\xa2+\x19\x99\xa7>U\x9a\xad\xder\xca2\xc7\xfa" +
	"\xf5\xef\xf1\x9c].\x95\x87\xc6l\xd7\x8eOJ\xa7\x9c" +
	"\x01D;7\x88\x0c\x10%\x8f\xf5\x12\x89#\x1cb\x80" +
	"!\x09\xa4\xa0\xc1>\x0d\xf6p\x881\x86x\xd6v$" +
	"\x12\xcd\xab\x11\x90 \xc4\xf3\xb6k\xe3_B\x86\x031" +
	"b\xbal\x0c\xe6\xc1\xc1\x17d\xa5*+\x93\xf2\x8e'" +
	"\x1d\xb8zz\x8a\x1bQ\xa5j\xe3\x17\xbb\x89\xc4]\x0e" +
	"\xf1\x98!\x86}\xe5\xcf\x7f\xa8\xd1{\x1cb\x89!\xc6" +
	"\xf6T\x0a\x8c(\xf9d\x88H<\xe0\x10\xcf\x18b\xfc" +
	"\xa7J\x81\x13%\x97'\x89\xc4\x12\x87x\xc1\x103v" +
	"U\x0a\x06Q\xf2y\x96H\xacr\x88W\x0cf\xd9s" +
	"\x918\xf0\xcf\x97oNK\x17\x89\xe6\xe3\xfa\xe8p^" +
	"\x16\xa5+[\x1b\xca\xf1\xb2N\xaeR\xc8\x12\xc2\xba^" +
	"\xc9\xef\x93Y\xc8\x86\xf5C}\x19\xb5\x1d9!\x1d\xc7" +
	"\x9e\x96\xa4]\x896\xde$\xddI$F8\xc4x\xe0" +
	"M\xceiO\xc68D\x86!\xc9\x98o\xc9\xc4U\"" +
	"1\xce!\xae0\xf0B\x1eQb\x88\x12\xccY\xb9p" +
	"P\xab\\\xb1 K\xee%\x8f\x02\x84\xf0\x88hE\x8d" +
	"\x88\x84\xcbi\xa8\x19\x0a\xaaA]\xcd(\x918\xcb!" +
	".\xfe\xa6f\xd8qm\xd7s`\x12\x83I\xb8?\xe7" +
	"_\xbaEKhj\x9c\xf2\xed\x12w\xa4V\x94h\xc6" +
	"\xc6\xd6\x01\xbd\xce!f\x82\xb1\x91\xda\xa2)\x0eQ\x0c" +
	"\xc6\xa6\xa0\xd1<\x87(\x07c3\xa7\xd1\x19\x0e\xe1\xfe" +
	"1\xe2\xf5\x8c4>.u\xb4\x96\xa6\x16\xd4\xf1\xb2\xad" +
	"h\xb8\xcd\x19\xcf\x9d\x18\xf6=\xf8\x9b]<Y\xdf\xc5" +
	"SM\xa1\x87\xf2\xd5U\xb5\x8b\x9e\xacma\x8c\xf0+" +
	"\x00\x00\xff\xff\xa0\xecBp"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ad055e760f5b08be,
		Nodes: []uint64{
			0xcd8ddd577462762d,
			0xd58909d665880630,
			0xdefacd874f15a465,
			0xe7bcfbaa769082c4,
			0xfb2adf604579752f,
			0xfefd696300722295,
		},
		Compressed: true,
	})
}
